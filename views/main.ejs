<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>메인 페이지</title>
    <link href="/map.css" rel="stylesheet">
    
</head>
<body>
    <div class="container">
        <div class="search-area" id="searchArea">
            <div class="search-top">
                <div class="top-top">
                    <input type="text" class="inputbox" placeholder="장소를 입력하세요" id="searchInput">
                </div>
                <div class="top-bottom">
                    <div class="btnArea-search" id="btnSearch">
                        <button class="btn-search" onclick="searchPlaces()">검색</button>
                    </div>
                    <div class="btnArea-my" id="btnMy">
                        <% if (isLoggedIn) { %>
                            My
                        <% } else { %>
                            <a href="/login">로그인</a> 
                        <% } %>
                    </div>
                </div>
            </div>
            <div class="search-bottom" id="pagination-container">
                <!-- 검색 결과가 여기에 동적으로 추가됩니다 -->
            </div>
        </div>
        <div class="map-area">
            <div class="map" id="map"></div>
        </div>
    </div>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=03963931ac47a435fe5c53e993bbb32d"></script>
    <script>
          const locationList = <%- JSON.stringify(locationList) %>;

let map; // 전역 변수로 맵 객체를 선언
let markers = []; // 전역 변수로 마커 배열을 선언
let currentPage = 1;
const pageSize = 4; // 페이지당 항목 수
let lastQuery = '';

function initMap() {
    const container = document.getElementById('map');
    const options = {
        center: new kakao.maps.LatLng(37.5665, 126.9780), // 초기 중앙 위치를 서울로 설정
        level: 8
    };
    map = new kakao.maps.Map(container, options);
    if (locationList.length > 0) {
        showMarkers(locationList);
    }
}

function searchPlaces() {
    const query = document.getElementById('searchInput').value.trim();

    // 검색어가 변경되면 currentPage를 1로 초기화
    if (query !== lastQuery) {
        currentPage = 1;
        lastQuery = query;
    }

    fetch(`/main/searchAction?q=${encodeURIComponent(query)}&page=${currentPage}&pageSize=${pageSize}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('검색 결과를 찾을 수 없습니다.');
            }
            return response.json();
        })
        .then(data => {
            console.log('Received data:', data); // 데이터 확인

            const container = document.getElementById('pagination-container');
            container.innerHTML = ''; // 이전 결과 제거

            // 데이터가 배열이고 요소가 있는지 확인
            if (Array.isArray(data.data) && data.data.length > 0) {
                // 현재 페이지가 총 페이지 수를 초과하면 currentPage를 1로 재설정
                if (data.currentPage > data.totalPages) {
                    currentPage = 1;
                    searchPlaces(); // 다시 검색
                    return;
                }

                data.data.forEach(location => {
                    const div = document.createElement('div');
                    div.classList.add('bottom-list', 'active'); // 'active' 클래스를 추가하여 보이게 함
                    div.innerHTML = `
                        <strong>${location.centername}</strong>
                        <p>
                            주소 - ${location.address}<br>
                            연락처 - ${location.phonenumber}
                        </p>
                    `;
                    container.appendChild(div);
                });

                // 페이지네이션 버튼 추가
                const pagination = document.createElement('div');
                pagination.classList.add('pagination');

                // Previous 버튼
                if (data.currentPage > 1) {
                    pagination.innerHTML += `<button onclick="changePage(${data.currentPage - 1})">Previous</button>`;
                }

                // Page 번호
                for (let i = 1; i <= data.totalPages; i++) {
                    pagination.innerHTML += `<button onclick="changePage(${i})">${i}</button>`;
                }

                // Next 버튼
                if (data.currentPage < data.totalPages) {
                    pagination.innerHTML += `<button onclick="changePage(${data.currentPage + 1})">Next</button>`;
                }

                container.appendChild(pagination);

                // 지도에 마커 표시
                showMarkers(data.data);
            } else {
                container.innerHTML = '<p>검색 결과가 없습니다.</p>';
                // 기존 마커를 모두 제거
                removeMarkers();
            }
        })
        .catch(error => {
            console.error('Error:', error.message);
            const container = document.getElementById('pagination-container');
            container.innerHTML = `<div class="bottom-list"><p>${error.message}</p></div>`;
        });
}

function showMarkers(locations) {
    const positions = locations.map(location => ({
        content: `
            <div style="padding:5px;">
            ${location.centername}! <br>
            <a href="https://map.kakao.com/link/map/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">큰지도보기</a> 
            <a href="https://map.kakao.com/link/to/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">길찾기</a>
            </div>`,
        latlng: new kakao.maps.LatLng(parseFloat(location.latitude), parseFloat(location.longitude))
    }));

    let sumLat = 0;
    let sumLng = 0;

    positions.forEach(position => {
        sumLat += position.latlng.getLat();
        sumLng += position.latlng.getLng();
    });

    const avgLat = sumLat / positions.length;
    const avgLng = sumLng / positions.length;

    // 지도 중심을 검색된 위치의 중앙으로 이동
    map.setCenter(new kakao.maps.LatLng(avgLat, avgLng));

    // 기존 마커를 모두 제거
    removeMarkers();

    // 새로운 마커를 지도에 추가
    positions.forEach(position => {
        const marker = new kakao.maps.Marker({
            map: map,
            position: position.latlng
        });

        const infowindow = new kakao.maps.InfoWindow({
            content: position.content
        });

        kakao.maps.event.addListener(marker, 'mouseover', () => infowindow.open(map, marker));
        kakao.maps.event.addListener(marker, 'mouseout', () => infowindow.close());

        markers.push(marker); // 마커 배열에 추가
    });
}

// 기존 마커를 모두 제거하는 함수
function removeMarkers() {
    markers.forEach(marker => marker.setMap(null));
    markers = [];
}

function changePage(page) {
    currentPage = page;
    searchPlaces(); // 현재 페이지로 검색 실행
}

window.onload = initMap; // 페이지 로드 시 초기 맵을 생성
document.getElementById('btnSearch').addEventListener('click', searchPlaces);
    </script>
</body>
</html>