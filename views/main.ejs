<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>메인 페이지</title>
    <link href="/map.css" rel="stylesheet">
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <script src="/js/favorite.js" defer></script>
    
</head>
<body>
    <div class="container">
        <div class="search-area" id="searchArea">
            <div class="search-top">
                <div class="top-top">
                    <input type="text" class="inputbox" placeholder="장소를 입력하세요" id="searchInput">
                </div>
                <div class="top-bottom">
                    <div class="btnArea-search" id="btnSearch">
                        <button class="btn-search" onclick="searchPlaces()">검색</button>
                    </div>
                    <div class="btnArea-my" id="btnMy">
                        <% if (isLoggedIn) { %>
                            My
                        <% } else { %>
                            <a href="/login">로그인</a> 
                        <% } %>
                    </div>
                </div>
            </div>
            <div class="search-bottom" id="pagination-container">
                <div id="results-container">
                    <!-- 검색 결과가 여기에 동적으로 추가됩니다 -->
                </div>
                <div class="pagination" id="pagination-buttons">
                    <!-- 페이징 버튼이 여기에 동적으로 추가됩니다 -->
                    <% if (isLoggedIn) { %>
                        <!-- 로그인 상태일 때 로그아웃 버튼 추가 -->
                        <form action="/logout" method="POST" class="logout-form">
                            <h1>Welcome, <%= user ? user.username : 'Guest' %>!</h1>
                            <button type="submit" class="btn-logout">로그아웃</button>
                        </form>
                    <% } %>    
                </div>
            </div>
        </div>
        <div class="map-area">
            <div class="map" id="map"></div>
        </div>
    </div>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=03963931ac47a435fe5c53e993bbb32d"></script>
<script>
    const locationList = <%- JSON.stringify(locationList) %>;
    const username = '<%= user ? user.username : '' %>';  
    console.log(username)

    let map; // 전역 변수로 맵 객체를 선언
    let markers = []; // 전역 변수로 마커 배열을 선언
    let currentPage = 1;
    const pageSize = 4; // 페이지당 항목 수
    let lastQuery = '';
    let allSearchResults = []; // 전체 검색 결과를 저장할 배열

    function initMap() {
        const container = document.getElementById('map');
        const options = {
            center: new kakao.maps.LatLng(37.5665, 126.9780), // 초기 중앙 위치를 서울로 설정
            level: 8
        };
        map = new kakao.maps.Map(container, options);
    }

    function searchPlaces() {
        const query = document.getElementById('searchInput').value.trim();

        // 검색어가 변경되면 currentPage를 1로 초기화
        if (query !== lastQuery) {
            currentPage = 1;
            lastQuery = query;
        }

    fetch(`/main/searchAction?q=${encodeURIComponent(query)}&page=1&pageSize=Infinity`)
        .then(response => {
            if (!response.ok) {
                throw new Error('검색 결과를 찾을 수 없습니다.');
            }
            return response.json();
        })
        .then(data => {
            console.log('Received data:', data); // 데이터 확인

            if (Array.isArray(data.data) && data.data.length > 0) {
                allSearchResults = data.data; // 모든 검색 결과 저장
                displayPageResults(); // 현재 페이지 결과 표시
                updatePagination(data.totalPages); // 페이지네이션 업데이트
                showMarkers(allSearchResults); // 지도에 모든 검색 결과 마커 표시
            } else {
                document.getElementById('results-container').innerHTML = '<p>검색 결과가 없습니다.</p>';
                // 기존 마커를 모두 제거
                removeMarkers();
            }
        })
        .catch(error => {
            console.error('Error:', error.message);
            document.getElementById('results-container').innerHTML = `<div class="bottom-list"><p>${error.message}</p></div>`;
        });
            }       

    function displayPageResults() {
        const container = document.getElementById('results-container');
        container.innerHTML = ''; // 이전 결과 제거

        const start = (currentPage - 1) * pageSize;
        const end = currentPage * pageSize;
        const pageResults = allSearchResults.slice(start, end);

        pageResults.forEach(location => {
            const div = document.createElement('div');
            div.classList.add('bottom-list', 'active'); // 'active' 클래스를 추가하여 보이게 함
            div.innerHTML = `
                <strong>${location.centername}</strong>
                <p>
                    주소 - ${location.address}<br>
                    연락처 - ${location.phonenumber}
                      <span class="favorite-icon" onclick="checkLoginAndToggleFavorite(this, '${location._id}')">
                        <ion-icon name="star-outline">
                        </ion-icon>
                      </span>                
                </p>
            `;
            container.appendChild(div);
        });
    }

    const isLoggedIn = <%- isLoggedIn %>;

    function updatePagination(totalPages) {
        const paginationContainer = document.getElementById('pagination-buttons');
        paginationContainer.innerHTML = ''; // 이전 페이지 버튼 제거

        // Previous 버튼
        if (currentPage > 1) {
            const prevButton = document.createElement('button');
            prevButton.textContent = 'Previous';
            prevButton.onclick = () => changePage(currentPage - 1);
            paginationContainer.appendChild(prevButton);
        }

        // Page 번호 버튼
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i;
            pageButton.onclick = () => changePage(i);
            if (i === currentPage) {
                pageButton.classList.add('active'); // 현재 페이지 표시
            }
            paginationContainer.appendChild(pageButton);
        }

        // Next 버튼
        if (currentPage < totalPages) {
            const nextButton = document.createElement('button');
            nextButton.textContent = 'Next';
            nextButton.onclick = () => changePage(currentPage + 1);
            paginationContainer.appendChild(nextButton);
        }
    }

    function showMarkers(locations) {
        const positions = locations.map(location => ({
            content: `
                <div style="padding:5px;">
                ${location.centername}! <br>
                <a href="https://map.kakao.com/link/map/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">큰지도보기</a> 
                <a href="https://map.kakao.com/link/to/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">길찾기</a>
                </div>`,
            latlng: new kakao.maps.LatLng(parseFloat(location.latitude), parseFloat(location.longitude))
    }));

    let sumLat = 0;
    let sumLng = 0;

    positions.forEach(position => {
        sumLat += position.latlng.getLat();
        sumLng += position.latlng.getLng();
    });

    const avgLat = sumLat / positions.length;
    const avgLng = sumLng / positions.length;

    // 지도 중심을 검색된 위치의 중앙으로 이동
    map.setCenter(new kakao.maps.LatLng(avgLat, avgLng));

    // 기존 마커를 모두 제거
    removeMarkers();

    // 새로운 마커를 지도에 추가
    positions.forEach(position => {
        const marker = new kakao.maps.Marker({
            map: map,
            position: position.latlng
        });

            const infowindow = new kakao.maps.InfoWindow({
                content: position.content
            });

            let infowindowOpen = false; // 인포윈도우 열림 상태를 저장하는 변수
            //더블클릭을 안하고 다시 검색하면 검색 결과가 바뀌어도 전의 마크가 남아있음
            // kakao.maps.event.addListener(marker, 'click', () => {
            //     if (infowindowOpen) {
            //         infowindow.close();
            //     } else {
            //         infowindow.open(map, marker);
            //     }
            //     infowindowOpen = !infowindowOpen; // 상태 토글
            // });

            markers.push(marker); // 마커 배열에 추가
        });
    }

    // 기존 마커를 모두 제거하는 함수
    function removeMarkers() {
        markers.forEach(marker => marker.setMap(null));
        markers = [];
    }

    function changePage(page) {
        currentPage = page;
        displayPageResults(); // 현재 페이지 결과 표시
        updatePagination(Math.ceil(allSearchResults.length / pageSize)); // 페이지네이션 업데이트
    }

    window.onload = initMap; // 페이지 로드 시 초기 맵을 생성
    document.getElementById('btnSearch').addEventListener('click', searchPlaces);

</script>
</body>
</html>