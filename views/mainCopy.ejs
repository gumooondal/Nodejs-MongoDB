<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search and Map</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/map2.css">
</head>
<body>
    <div class="container-fluid p-0">
        <div class="row g-0">
            <div class="col-md-4 search-area" id="searchArea">
                <div class="search-top">
                    <div class="top-top">
                        <input type="text" class="inputbox" placeholder="장소를 입력하세요" id="searchInput">
                    </div>
                    <div class="top-bottom d-flex justify-content-between">
                        <div class="btnArea-search" id="btnSearch">
                            <button class="btn-search" onclick="searchPlaces()">검색</button>
                        </div>
                        <div class="btnArea-my" id="btnMy">
                            <% if (isLoggedIn) { %>
                                <form action="/logout" method="POST" class="logout-form">
                                    <button type="submit" class="btn-logout">로그아웃</button>
                                </form>
                            <% } else { %>
                                <a href="/login" class="btn-login">로그인</a> 
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="search-bottom" id="pagination-container">
                    <div id="results-container">
                        <!-- 검색 결과가 여기에 동적으로 추가됩니다 -->
                    </div>
                    <div class="pagination" id="pagination-buttons">
                        <!-- 페이징 버튼이 여기에 동적으로 추가됩니다 -->
                    </div>
                </div>
            </div>
            <div class="col-md-8 map-area">
                <div class="map" id="map"></div>
            </div>
        </div>
    </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=03963931ac47a435fe5c53e993bbb32d"></script>
<script>


// JavaScript에서 locationList를 사용하는 예시
locationList.forEach(location => {
  console.log(`Name: ${location.centername}, Latitude: ${location.latitude}, Longitude: ${location.longitude}`);
});

let currentPage = 1;  // 현재 페이지 번호를 저장하는 변수
const itemsPerPage = 4;  // 페이지당 표시할 항목 수

/**
 * 특정 페이지를 표시하는 함수
 * @param {number} page - 표시할 페이지 번호
 */
function showPage(page) {
    const items = document.querySelectorAll('.bottom-list');  // 모든 .bottom-list 요소를 가져옴
    const totalPages = Math.ceil(items.length / itemsPerPage);  // 전체 페이지 수 계산

    // 페이지 번호가 유효 범위를 벗어나지 않도록 조정
    if (page < 1) page = 1;
    if (page > totalPages) page = totalPages;

    currentPage = page;  // 현재 페이지 번호 업데이트

    // 각 항목을 순회하며 현재 페이지에 해당하는 항목만 표시
    items.forEach((item, index) => {
        item.style.display = 'none';  // 모든 항목을 우선 숨김
        if (index >= (page-1) * itemsPerPage && index < page * itemsPerPage) {
            item.style.display = 'block';  // 현재 페이지 범위에 있는 항목만 표시
        }
    });
}

/**
 * 이전 페이지를 표시하는 함수
 */
function prevPage() {
    if (currentPage > 1) {  // 현재 페이지가 첫 페이지보다 클 때만 이전 페이지로 이동
        showPage(currentPage - 1);
    }
}

/**
 * 다음 페이지를 표시하는 함수
 */
function nextPage() {
    const items = document.querySelectorAll('.bottom-list');  // 모든 .bottom-list 요소를 가져옴
    if (currentPage < Math.ceil(items.length / itemsPerPage)) {  // 현재 페이지가 마지막 페이지보다 작을 때만 다음 페이지로 이동
        showPage(currentPage + 1);
    }
}

// 초기 페이지 로드 시 첫 페이지를 표시
showPage(1);

const positions = locationList.map(location => ({
  content: `
    <div style="padding:5px;">
      ${location.centername}! <br>
      <a href="https://map.kakao.com/link/map/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">큰지도보기</a> 
      <a href="https://map.kakao.com/link/to/${encodeURIComponent(location.centername)},${location.latitude},${location.longitude}" style="color:blue" target="_blank">길찾기</a>
    </div>`,
  latlng: new kakao.maps.LatLng(parseFloat(location.latitude), parseFloat(location.longitude))
}));

console.log(positions);

let sumLat = 0;
let sumLng = 0;

positions.forEach(position => {
    sumLat += position.latlng.getLat();
    sumLng += position.latlng.getLng();
});

const avgLat = sumLat / positions.length;
const avgLng = sumLng / positions.length;

console.log('중앙 위도:', avgLat);
console.log('중앙 경도:', avgLng);

var mapContainer = document.getElementById('map'), // 지도를 표시할 div  
    mapOption = { 
        center: new kakao.maps.LatLng(avgLat, avgLng), // 지도의 중심좌표
        level: 8 // 지도의 확대 레벨
    };

var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
 

for (var i = 0; i < positions.length; i ++) {
    // 마커를 생성합니다
    var marker = new kakao.maps.Marker({
        map: map, // 마커를 표시할 지도
        position: positions[i].latlng // 마커의 위치
    });

    // 마커에 표시할 인포윈도우를 생성합니다 
    var infowindow = new kakao.maps.InfoWindow({
        content: positions[i].content // 인포윈도우에 표시할 내용
    });

    // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
    // 이벤트 리스너로는 클로저를 만들어 등록합니다 
    // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다
    kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
    kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));
}

// 인포윈도우를 표시하는 클로저를 만드는 함수입니다 
function makeOverListener(map, marker, infowindow) {
    return function() {
        infowindow.open(map, marker);
    };
}

// 인포윈도우를 닫는 클로저를 만드는 함수입니다 
function makeOutListener(infowindow) {
    return function() {
        infowindow.close();
    };
}
</script>
</body>
</html>